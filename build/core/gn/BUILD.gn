# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//ets_frontend/ts2panda/ts2abc_config.gni")
import("//ets_runtime/js_runtime_config.gni")

print("root_out_dir=$root_out_dir")
print("root_build_dir=$root_build_dir")
print("root_gen_dir=$root_gen_dir")
print("current_toolchain=$current_toolchain")
print("host_toolchain=$host_toolchain")
print("current_os=$current_os,   current_cpu=$current_cpu")
print("host_os=$host_os,      host_cpu=$host_cpu")
print("target_os=$target_os,    target_cpu=$target_cpu")

print()

# /js_runtime/ecmascript/js_vm/BUILD.gn

group("ark_js_packages") {
  deps = [ "//ets_runtime/ecmascript/js_vm:ark_js_vm" ]
}

group("ark_ts2abc") {
  deps = [ "//ets_frontend/ts2panda/ts2abc:ts2abc" ]
}

#######  (ark_ts2abc_build)  #######

src_dir = target_out_dir + "/src"

ohos_copy("ts2abc_src") {
  sources = [ "${ts2abc_root}/src" ]
  outputs = [ src_dir ]
}

ohos_copy("node_modules") {
  sources = [ rebase_path("${node_modules}") ]
  print("sources=$sources")
  outputs = [ target_out_dir + "/node_modules" ]
}

ohos_copy("config_files") {
  sources = [
    "${ts2abc_root}/package-lock.json",
    "${ts2abc_root}/package.json",
    "${ts2abc_root}/tsconfig.json",
    "${ts2abc_root}/webpack.config.js",
  ]

  outputs = [ target_out_dir + "/{{source_file_part}}" ]
}

action("ts2abc_diagnostic_ts") {
  script = "${ts2abc_root}/scripts/gen_diagnostic.rb"
  args = [
    "--template",
    rebase_path("${ts2abc_root}/templates/diagnostic.ts.erb", root_build_dir),
    "--data",
    rebase_path("${ts2abc_root}/scripts/diagnosticMessages.json",
                root_build_dir),
    "--output",
    rebase_path("${src_dir}/diagnostic.ts"),
  ]

  outputs = [ "${src_dir}/diagnostic.ts" ]
  deps = [ ":ts2abc_src" ]
}

ark_gen_file("ts2abc_irnodes_ts") {
  template_file = "${ts2abc_root}/templates/irnodes.ts.erb"
  data_file = "$root_gen_dir/isa/isa.yaml"
  requires = [
    "$ark_root/isa/isapi.rb",
    "$ark_root/libpandafile/pandafile_isapi.rb",
  ]
  output_file = "$src_dir/irnodes.ts"
  extra_dependencies = [
    ":ts2abc_src",
    "$ark_root/isa:isa_combine",
  ]
}

action("npm_run_build") {
  deps = [
    ":config_files",
    ":node_modules",
    ":ts2abc_diagnostic_ts",
    ":ts2abc_irnodes_ts",
    ":ts2abc_src",
  ]

  if (is_linux || is_mingw || is_mac) {
    deps += [ "//ets_frontend/ts2panda/ts2abc:ts2abc" ]
  }

  script = "${ts2abc_root}/scripts/run.py"
  args = [
    "--src-dir",
    rebase_path(ts2abc_root),
    "--dist-dir",
    rebase_path(target_out_dir),
    "--node",
    rebase_path(node_path),
    "--node-modules",
    rebase_path(node_modules),
  ]

  if (is_linux) {
    args += [
      "--platform",
      "linux",
      "--js2abc",
      rebase_path("${root_out_dir}/js2abc"),
    ]
  } else if (is_mingw) {
    args += [
      "--platform",
      "win",
      "--js2abc",
      rebase_path("${root_out_dir}/js2abc.exe"),
    ]
  } else if (is_mac) {
    args += [
      "--platform",
      "mac",
      "--js2abc",
      rebase_path("${root_out_dir}/js2abc"),
    ]
  }

  if (is_debug) {
    args += [
      "--buildMode",
      "debug",
    ]
  } else {
    args += [
      "--buildMode",
      "release",
    ]
  }

  outputs = []
  if (is_mingw) {
    outputs += [ "${root_out_dir}/ark/ark/build-win" ]
  } else if (is_mac) {
    outputs += [ "${root_out_dir}/ark/ark/build-mac" ]
  } else {
    print("{root_out_dir}/ark/ark/build == ${root_out_dir}/ark/ark/build")
    outputs += [ "${root_out_dir}/ark/ark/build" ]
  }
}
