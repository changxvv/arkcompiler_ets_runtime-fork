/*
* Copyright (c) Microsoft Corporation. All rights reserved.
* Copyright (c) 2023 Huawei Device Co., Ltd.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* This file has been modified by Huawei to verify type inference by adding verification statements.
*/

// === tests/cases/conformance/jsdoc/declarations/obj.json ===
declare function AssertType(value:any, type:string):void;
{
AssertType({    "x": 12,    "y": 12,    "obj": {        "items": [{"x": 12}, {"x": 12, "y": 12}, {"x": 0}, {"x": -1, "err": true}]    }}, "{ x: number; y: number; obj: { items: (union)[]; }; }");

    "x": 12,
AssertType("x", "number");
AssertType(12, "int");

    "y": 12,
AssertType("y", "number");
AssertType(12, "int");

    "obj": {
AssertType("obj", "{ items: (union)[]; }");
AssertType({        "items": [{"x": 12}, {"x": 12, "y": 12}, {"x": 0}, {"x": -1, "err": true}]    }, "{ items: (union)[]; }");

        "items": [{"x": 12}, {"x": 12, "y": 12}, {"x": 0}, {"x": -1, "err": true}]
AssertType("items", "(union)[]");
AssertType([{"x": 12}, {"x": 12, "y": 12}, {"x": 0}, {"x": -1, "err": true}], "(union)[]");
AssertType({"x": 12}, "{ x: number; }");
AssertType("x", "number");
AssertType(12, "int");
AssertType({"x": 12, "y": 12}, "{ x: number; y: number; }");
AssertType("x", "number");
AssertType(12, "int");
AssertType("y", "number");
AssertType(12, "int");
AssertType({"x": 0}, "{ x: number; }");
AssertType("x", "number");
AssertType(0, "int");
AssertType({"x": -1, "err": true}, "{ x: number; err: boolean; }");
AssertType("x", "number");
AssertType(-1, "int");
AssertType(1, "int");
AssertType("err", "boolean");
AssertType(true, "boolean");
    }
}

