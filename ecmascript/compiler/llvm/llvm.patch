diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
index 0e85afa82c7..43756892e40 100644
--- a/llvm/CMakeLists.txt
+++ b/llvm/CMakeLists.txt
@@ -505,8 +505,15 @@ option(LLVM_BUILD_RUNTIME
   "Build the LLVM runtime libraries." ON)
 option(LLVM_BUILD_EXAMPLES
   "Build the LLVM example programs. If OFF, just generate build targets." OFF)
+option(BUILD_ARK_GC_SUPPORT
+	"ARK support GC. If ON, support GC." OFF)
+if(BUILD_ARK_GC_SUPPORT)
+   add_definitions(-DARK_GC_SUPPORT)
+endif(BUILD_ARK_GC_SUPPORT)
+
 option(LLVM_INCLUDE_EXAMPLES "Generate build targets for the LLVM examples" ON)
 
+
 if(LLVM_BUILD_EXAMPLES)
   add_definitions(-DBUILD_EXAMPLES)
 endif(LLVM_BUILD_EXAMPLES)
diff --git a/llvm/lib/Target/X86/X86FrameLowering.cpp b/llvm/lib/Target/X86/X86FrameLowering.cpp
index 1da20371caf..436819f0c44 100644
--- a/llvm/lib/Target/X86/X86FrameLowering.cpp
+++ b/llvm/lib/Target/X86/X86FrameLowering.cpp
@@ -1168,6 +1168,34 @@ void X86FrameLowering::emitPrologue(MachineFunction &MF,
     else
       MFI.setOffsetAdjustment(-StackSize);
   }
+#ifdef ARK_GC_SUPPORT
+    // push marker
+    if (MF.getFunction().hasFnAttribute("js-stub-call"))
+    {
+      int64_t marker = 0x0;
+      MF.getFunction()
+        .getFnAttribute("js-stub-call")
+        .getValueAsString()
+        .getAsInteger(10, marker);//marker 1 break frame
+      BuildMI(MBB, MBBI, DL, TII.get(Is64Bit ? X86::PUSH64i32 : X86::PUSH32i8))
+        .addImm(marker)
+        .setMIFlag(MachineInstr::FrameSetup);
+      if (marker == JS_ENTRY_FRAME_MARK) {
+        BuildMI(MBB, MBBI, DL, TII.get(Is64Bit ? X86::PUSH64i32 : X86::PUSH32i8))
+        .addImm(marker)
+        .setMIFlag(MachineInstr::FrameSetup);
+      }
+      BuildMI(MBB, MBBI, DL, TII.get(Is64Bit ? X86::PUSH64r : X86::PUSH32r))
+        .addImm(marker)
+        .setMIFlag(MachineInstr::FrameSetup);
+      /*reserve thread.fp */
+      if (marker == JS_ENTRY_FRAME_MARK) {
+        BuildMI(MBB, MBBI, DL, TII.get(Is64Bit ? X86::PUSH64r : X86::PUSH32r))
+          .addImm(marker)
+          .setMIFlag(MachineInstr::FrameSetup);
+      }
+    }
+#endif
 
   // For EH funclets, only allocate enough space for outgoing calls. Save the
   // NumBytes value that we would've used for the parent frame.
@@ -1635,6 +1663,27 @@ void X86FrameLowering::emitEpilogue(MachineFunction &MF,
   uint64_t SEHStackAllocAmt = NumBytes;
 
   if (HasFP) {
+#ifdef ARK_GC_SUPPORT
+    if (MF.getFunction().hasFnAttribute("js-stub-call"))
+    {
+      int64_t marker = 0x0;
+      MF.getFunction()
+      .getFnAttribute("js-stub-call")
+      .getValueAsString()
+      .getAsInteger(10, marker);//marker 1 break frame
+
+      // pop marker
+      BuildMI(MBB, MBBI, DL, TII.get(Is64Bit ? X86::POP64r : X86::POP32r),
+              MachineFramePtr)
+          .setMIFlag(MachineInstr::FrameDestroy);
+      if (marker == JS_ENTRY_FRAME_MARK) {
+        // pop thread.fp
+        BuildMI(MBB, MBBI, DL, TII.get(Is64Bit ? X86::POP64r : X86::POP32r),
+            MachineFramePtr)
+        .setMIFlag(MachineInstr::FrameDestroy);
+      }
+    }
+#endif
     // Pop EBP.
     BuildMI(MBB, MBBI, DL, TII.get(Is64Bit ? X86::POP64r : X86::POP32r),
             MachineFramePtr)
@@ -1993,8 +2042,33 @@ bool X86FrameLowering::assignCalleeSavedSpillSlots(
 
   if (hasFP(MF)) {
     // emitPrologue always spills frame register the first thing.
+#ifdef ARK_GC_SUPPORT
+    if (MF.getFunction().hasFnAttribute("js-stub-call")) {
+        int64_t marker = 0x0;
+        MF.getFunction()
+        .getFnAttribute("js-stub-call")
+        .getValueAsString()
+        .getAsInteger(10, marker);//marker 1 break frame
+        if (marker == JS_ENTRY_FRAME_MARK) {
+            SpillSlotOffset -=  3 * SlotSize; // add type and thread.fp
+            MFI.CreateFixedSpillStackObject(SlotSize, SpillSlotOffset);
+            MFI.CreateFixedSpillStackObject(SlotSize, SpillSlotOffset);
+            MFI.CreateFixedSpillStackObject(SlotSize, SpillSlotOffset);
+            CalleeSavedFrameSize += 16;
+        } else {
+            SpillSlotOffset -=  2 * SlotSize; // add type
+            MFI.CreateFixedSpillStackObject(SlotSize, SpillSlotOffset);
+            MFI.CreateFixedSpillStackObject(SlotSize, SpillSlotOffset);
+            CalleeSavedFrameSize += 8;
+        }
+    } else {
+        SpillSlotOffset -= SlotSize; // add type and thread.fp
+        MFI.CreateFixedSpillStackObject(SlotSize, SpillSlotOffset);
+    }
+#else
     SpillSlotOffset -= SlotSize;
     MFI.CreateFixedSpillStackObject(SlotSize, SpillSlotOffset);
+#endif
 
     // Since emitPrologue and emitEpilogue will handle spilling and restoring of
     // the frame register, we can delete it from CSI list and not have to worry
diff --git a/llvm/lib/Target/X86/X86FrameLowering.h b/llvm/lib/Target/X86/X86FrameLowering.h
index 2103d6471ea..3fd89b0d9ee 100644
--- a/llvm/lib/Target/X86/X86FrameLowering.h
+++ b/llvm/lib/Target/X86/X86FrameLowering.h
@@ -15,6 +15,8 @@
 
 #include "llvm/CodeGen/TargetFrameLowering.h"
 
+#define JS_ENTRY_FRAME_MARK 1
+
 namespace llvm {
 
 class MachineInstrBuilder;
