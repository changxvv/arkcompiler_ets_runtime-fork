/**
 * Copyright (c)  \ 2021-2022 Huawei Device Co.)  \ Ltd.
 * Licensed under the Apache License)  \ Version 2.0 (the "License")  \;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing)  \ software
 * distributed under the License is distributed on an "AS IS" BASIS)  \
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND)  \ either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef ECMASCRIPT_COMPILER_ECMA_OPCODE_H
#define ECMASCRIPT_COMPILER_ECMA_OPCODE_H

#include <map>
#include <string>

namespace panda::ecmascript::kungfu {

#define ECMA_BYTECODE_LIST(V)  \
    V(LDNAN_PREF) \
    V(LDINFINITY_PREF) \
    V(LDGLOBALTHIS_PREF) \
    V(LDUNDEFINED_PREF) \
    V(LDNULL_PREF) \
    V(LDSYMBOL_PREF) \
    V(LDGLOBAL_PREF) \
    V(LDTRUE_PREF) \
    V(LDFALSE_PREF) \
    V(THROWDYN_PREF) \
    V(TYPEOFDYN_PREF) \
    V(LDLEXENVDYN_PREF) \
    V(POPLEXENVDYN_PREF) \
    V(GETUNMAPPEDARGS_PREF) \
    V(GETPROPITERATOR_PREF) \
    V(ASYNCFUNCTIONENTER_PREF) \
    V(LDHOLE_PREF) \
    V(RETURNUNDEFINED_PREF) \
    V(CREATEEMPTYOBJECT_PREF) \
    V(CREATEEMPTYARRAY_PREF) \
    V(GETITERATOR_PREF) \
    V(THROWTHROWNOTEXISTS_PREF) \
    V(THROWPATTERNNONCOERCIBLE_PREF) \
    V(LDHOMEOBJECT_PREF) \
    V(THROWDELETESUPERPROPERTY_PREF) \
    V(DEBUGGER_PREF) \
    V(ADD2DYN_PREF_V8) \
    V(SUB2DYN_PREF_V8) \
    V(MUL2DYN_PREF_V8) \
    V(DIV2DYN_PREF_V8) \
    V(MOD2DYN_PREF_V8) \
    V(EQDYN_PREF_V8) \
    V(NOTEQDYN_PREF_V8) \
    V(LESSDYN_PREF_V8) \
    V(LESSEQDYN_PREF_V8) \
    V(GREATERDYN_PREF_V8) \
    V(GREATEREQDYN_PREF_V8) \
    V(SHL2DYN_PREF_V8) \
    V(ASHR2DYN_PREF_V8) \
    V(SHR2DYN_PREF_V8) \
    V(AND2DYN_PREF_V8) \
    V(OR2DYN_PREF_V8) \
    V(XOR2DYN_PREF_V8) \
    V(TONUMBER_PREF_V8) \
    V(NEGDYN_PREF_V8) \
    V(NOTDYN_PREF_V8) \
    V(INCDYN_PREF_V8) \
    V(DECDYN_PREF_V8) \
    V(EXPDYN_PREF_V8) \
    V(ISINDYN_PREF_V8) \
    V(INSTANCEOFDYN_PREF_V8) \
    V(STRICTNOTEQDYN_PREF_V8) \
    V(STRICTEQDYN_PREF_V8) \
    V(RESUMEGENERATOR_PREF_V8) \
    V(GETRESUMEMODE_PREF_V8) \
    V(CREATEGENERATOROBJ_PREF_V8) \
    V(THROWCONSTASSIGNMENT_PREF_V8) \
    V(GETTEMPLATEOBJECT_PREF_V8) \
    V(GETNEXTPROPNAME_PREF_V8) \
    V(CALLARG0DYN_PREF_V8) \
    V(THROWIFNOTOBJECT_PREF_V8) \
    V(ITERNEXT_PREF_V8) \
    V(CLOSEITERATOR_PREF_V8) \
    V(COPYMODULE_PREF_V8) \
    V(SUPERCALLSPREAD_PREF_V8) \
    V(DELOBJPROP_PREF_V8_V8) \
    V(NEWOBJAPPLY_PREF_V8_V8) \
    V(CREATEITERRESULTOBJ_PREF_V8_V8) \
    V(SUSPENDGENERATOR_PREF_V8_V8) \
    V(ASYNCFUNCTIONAWAITUNCAUGHT_PREF_V8_V8) \
    V(THROWUNDEFINEDIFHOLE_PREF_V8_V8) \
    V(CALLARG1DYN_PREF_V8_V8) \
    V(COPYDATAPROPERTIES_PREF_V8_V8) \
    V(STARRAYSPREAD_PREF_V8_V8) \
    V(GETITERATORNEXT_PREF_V8_V8) \
    V(SETOBJECTWITHPROTO_PREF_V8_V8) \
    V(LDOBJBYVALUE_PREF_V8_V8) \
    V(STOBJBYVALUE_PREF_V8_V8) \
    V(STOWNBYVALUE_PREF_V8_V8) \
    V(LDSUPERBYVALUE_PREF_V8_V8) \
    V(STSUPERBYVALUE_PREF_V8_V8) \
    V(LDOBJBYINDEX_PREF_V8_IMM32) \
    V(STOBJBYINDEX_PREF_V8_IMM32) \
    V(STOWNBYINDEX_PREF_V8_IMM32) \
    V(CALLSPREADDYN_PREF_V8_V8_V8) \
    V(ASYNCFUNCTIONRESOLVE_PREF_V8_V8_V8) \
    V(ASYNCFUNCTIONREJECT_PREF_V8_V8_V8) \
    V(CALLARGS2DYN_PREF_V8_V8_V8) \
    V(CALLARGS3DYN_PREF_V8_V8_V8_V8) \
    V(DEFINEGETTERSETTERBYVALUE_PREF_V8_V8_V8_V8) \
    V(NEWOBJDYNRANGE_PREF_IMM16_V8) \
    V(CALLIRANGEDYN_PREF_IMM16_V8) \
    V(CALLITHISRANGEDYN_PREF_IMM16_V8) \
    V(SUPERCALL_PREF_IMM16_V8) \
    V(CREATEOBJECTWITHEXCLUDEDKEYS_PREF_IMM16_V8_V8) \
    V(DEFINEFUNCDYN_PREF_ID16_IMM16_V8) \
    V(UNUSED_60) \
    V(UNUSED_61) \
    V(UNUSED_62) \
    V(DEFINEMETHOD_PREF_ID16_IMM16_V8) \
    V(NEWLEXENVDYN_PREF_IMM16) \
    V(COPYRESTARGS_PREF_IMM16) \
    V(CREATEARRAYWITHBUFFER_PREF_IMM16) \
    V(CREATEOBJECTHAVINGMETHOD_PREF_IMM16) \
    V(THROWIFSUPERNOTCORRECTCALL_PREF_IMM16) \
    V(CREATEOBJECTWITHBUFFER_PREF_IMM16) \
    V(LDLEXVARDYN_PREF_IMM4_IMM4) \
    V(LDLEXVARDYN_PREF_IMM8_IMM8) \
    V(LDLEXVARDYN_PREF_IMM16_IMM16) \
    V(STLEXVARDYN_PREF_IMM4_IMM4_V8) \
    V(STLEXVARDYN_PREF_IMM8_IMM8_V8) \
    V(STLEXVARDYN_PREF_IMM16_IMM16_V8) \
    V(DEFINECLASSWITHBUFFER_PREF_ID16_IMM16_IMM16_V8_V8) \
    V(GETMODULENAMESPACE_PREF_ID32) \
    V(STMODULEVAR_PREF_ID32) \
    V(TRYLDGLOBALBYNAME_PREF_ID32) \
    V(TRYSTGLOBALBYNAME_PREF_ID32) \
    V(LDGLOBALVAR_PREF_ID32) \
    V(STGLOBALVAR_PREF_ID32) \
    V(LDOBJBYNAME_PREF_ID32_V8) \
    V(STOBJBYNAME_PREF_ID32_V8) \
    V(STOWNBYNAME_PREF_ID32_V8) \
    V(LDSUPERBYNAME_PREF_ID32_V8) \
    V(STSUPERBYNAME_PREF_ID32_V8) \
    V(LDMODULEVAR_PREF_ID32_IMM8) \
    V(CREATEREGEXPWITHLITERAL_PREF_ID32_IMM8) \
    V(ISTRUE_PREF) \
    V(ISFALSE_PREF) \
    V(STCONSTTOGLOBALRECORD_PREF_ID32) \
    V(STLETTOGLOBALRECORD_PREF_ID32) \
    V(STCLASSTOGLOBALRECORD_PREF_ID32) \
    V(STOWNBYVALUEWITHNAMESET_PREF_V8_V8) \
    V(STOWNBYNAMEWITHNAMESET_PREF_ID32_V8) \
    V(LDFUNCTION_PREF) \
    V(NEWLEXENVWITHNAMEDYN_PREF_IMM16_IMM16) \
    V(LDBIGINT_PREF_ID32) \
    V(TONUMERIC_PREF_V8) \
    V(CREATEASYNCGENERATOROBJ_PREF_V8) \
    V(ASYNCGENERATORRESOLVE_PREF_V8_V8_V8) \
    V(UNUSED_8B) \
    V(DYNAMICIMPORT_PREF_V8) \
    V(LDPATCHVAR_PREF_IMM16) \
    V(STPATCHVAR_PREF_IMM16) \
    V(MOV_DYN_V8_V8) \
    V(MOV_DYN_V16_V16) \
    V(LDA_STR_ID32) \
    V(LDAI_DYN_IMM32) \
    V(FLDAI_DYN_IMM64) \
    V(JMP_IMM8) \
    V(JMP_IMM16) \
    V(JMP_IMM32) \
    V(JEQZ_IMM8) \
    V(JEQZ_IMM16) \
    V(LDA_DYN_V8) \
    V(STA_DYN_V8) \
    V(RETURN_DYN) \
    V(MOV_V4_V4) \
    V(JNEZ_IMM8) \
    V(JNEZ_IMM16) \

enum EcmaBytecode {
#define BYTECODE_ENUM(name) name,
    ECMA_BYTECODE_LIST(BYTECODE_ENUM)
#undef BYTECODE_ENUM
};

inline std::string GetEcmaBytecodeStr(EcmaBytecode opcode) {
    const std::map<EcmaBytecode, const char *> strMap = {
#define BYTECODE_NAME_MAP(name) { EcmaBytecode::name, #name },
    ECMA_BYTECODE_LIST(BYTECODE_NAME_MAP)
#undef BYTECODE_NAME_MAP
    };
    if (strMap.count(opcode) > 0) {
        return strMap.at(opcode);
    }
    return "bytecode-" + std::to_string(static_cast<uint16_t>(opcode));
}

}  // namespace panda::ecmascript::kungfu
#endif  // ECMASCRIPT_COMPILER_ECMA_OPCODE_H